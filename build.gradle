plugins { // (1) Gradle 5부터는 Gradle Plugin 사용법에 변경있음
    id 'org.springframework.boot' version '2.4.1' // RELEASE 삭제
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group 'com.springboot'
version '1.0-SNAPSHOT'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

// for Junit 5
test { // (2) Junit 5를 사용하기 위해서 필수 선언
    useJUnitPlatform()
}

dependencies {
    //(3)
    implementation('org.springframework.boot:spring-boot-starter-web') // 특정 버전을 명시하지 않아야 위에서 작성한 dependencies 버전을 따라감(이 부분은 추후 다시 체크)
    implementation('org.springframework.boot:spring-boot-starter-mustache') // 머스타치 플러그인 의존성 추가

    // lombok
    implementation('org.projectlombok:lombok') // 롬복 라이브러리를 사용하기 위해 추가
    annotationProcessor('org.projectlombok:lombok')
    testImplementation('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    implementation('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링 부트용 Spring Data Jpa 추상화 라이브러리 -> 스프링 부트 버전에 맞춰 자동을 JPA 관련 라이브러리들의 버전 관리
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation('com.h2database:h2') // 인메모리 관계형 데이터베이스(별도의 설치 없이 의존성만으로 관리가능), 메모리에서 실행되므로 애플리케이션을 재시작할 때마다 초기화 -> 테스트용도로 사용

    testImplementation('org.springframework.boot:spring-boot-starter-test') // 특정 버전을 명시하지 않아야 위에서 작성한 dependencies 버전을 따라감(이 부분은 추후 다시 체크)
}
